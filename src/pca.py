# -*- coding: utf-8 -*-
"""pca.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r37otpkuzg3OW-8tQBN6vsPhtsZV0Iq9
"""

from re import A
import pandas as pd
import utils

from sklearn.decomposition import PCA

from sklearn.metrics import auc, accuracy_score, confusion_matrix, mean_squared_error


def getOptimalPCAComponents(model, attr_train, class_train):
    maxScore = float('-inf')
    maxComp = -1
    numberOfColumns = attr_train.shape[1]
    for comp in range(1, numberOfColumns + 1):
        score = applyPCA(model, attr_train, class_train, comp)
        if score > maxScore:
            maxScore, maxComp = score, comp
    return [maxScore, maxComp]


def applyPCA(model, attr_train, class_train, component_number):
    modified_attr_train = get_modified_train_data(attr_train, component_number)
    model.fit(modified_attr_train, class_train)
    cost = utils.kfoldcv(model, modified_attr_train, class_train, component_number)
    return cost


def generate_model_with_pca(model, component_number, attr_train, class_train):
    pca = PCA(n_components=component_number)
    modified_attr_train = pca.fit_transform(attr_train)
    model.fit(modified_attr_train, class_train)
    return [model, pca]


def get_modified_train_data(attr_train, component_number):
    pca = PCA(n_components=component_number)
    modified_attr_train = pca.fit_transform(attr_train)
    return modified_attr_train
